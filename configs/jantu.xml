<?xml version="1.0" encoding="UTF-8"?><!--    Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved.     This program and the accompanying materials are made available     under the terms of the LIDA Software Framework Non-Commercial License v1.0     which accompanies this distribution, and is available at    http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf --><lida xmlns="http://ccrg.cs.memphis.edu/LidaXMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xsi:schemaLocation="http://ccrg.cs.memphis.edu/LidaXMLSchema LidaXMLSchema.xsd ">    <taskmanager>        <param name="taskManager.tickDuration" type="int">1 </param>        <param name="taskManager.maxNumberOfThreads" type="int"> 100</param>    </taskmanager>    <taskspawners>        <taskspawner name="defaultTS">            <class>edu.memphis.ccrg.lida.framework.tasks.TaskSpawnerImpl</class>        </taskspawner>    </taskspawners>    <submodules>         <module name="Environment">            <class>com.iskrembilen.jantu.modules.StarcraftEnvironment</class>            <param name="height" type="int"> 10 </param>            <param name="width" type="int">10 </param>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="SensoryMemory">            <class>com.iskrembilen.jantu.modules.StarcraftSensoryMemory</class>            <associatedmodule>Environment</associatedmodule>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="backgroundTask">                    <tasktype>SensoryMemoryBackgroundTask</tasktype>                    <ticksperrun>5</ticksperrun>                </task>            </initialTasks>        </module>        <module name="PerceptualAssociativeMemory">            <class>edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl</class>            <param name="pam.Upscale" type="double">.7 </param>            <param name="pam.Downscale" type="double">.6 </param>            <param name="pam.Selectivity" type="double">.5 </param>            <param name="nodes">idleWorker, unsaturatedResources, affordWorker, affordSupply, affordGateway, supplyBlocked</param>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="IdleWorkerDetector">                    <tasktype>IdleWorkerDetectorTask</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">idleWorker</param>                </task>                     <task name="UnsaturatedResourcesDetector">                    <tasktype>UnsaturatedResourcesDetectorTask</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">unsaturatedResources</param>                </task>                <task name="WorkerResourceDetector">                    <tasktype>ResourceDetectorTask</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">affordWorker</param>                    <param name="cost" type="int">50</param>                </task>                <task name="SupplyResourceDetector">                    <tasktype>ResourceDetectorTask</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">affordSupply</param>                    <param name="cost" type="int">100</param>                </task>                <task name="WorkerResourceDetector">                    <tasktype>ResourceDetectorTask</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">affordGateway</param>                    <param name="cost" type="int">150</param>                </task>                <task name="SupplyBlockDetector">                    <tasktype>SupplyBlockDetectorTask</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">supplyBlocked</param>                </task>            </initialTasks>            <initializerclass>edu.memphis.ccrg.lida.pam.BasicPamInitializer</initializerclass>        </module>        <module name="Workspace">            <class>edu.memphis.ccrg.lida.workspace.WorkspaceImpl</class>            <submodules>                <module name="PerceptualBuffer">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>                    <taskspawner>defaultTS</taskspawner>                </module>                <module name="CurrentSituationalModel">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>                    <taskspawner>defaultTS</taskspawner>                </module>            </submodules>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="UpdateCsmBackgroundTask">                    <tasktype>UpdateCsmBackgroundTask</tasktype>                    <ticksperrun>5</ticksperrun>                </task>            </initialTasks>        </module>        <module name="AttentionModule">            <class>edu.memphis.ccrg.lida.attentioncodelets.AttentionCodeletModule</class>            <associatedmodule>Workspace</associatedmodule>            <associatedmodule>GlobalWorkspace</associatedmodule>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="idleWorkerCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>50</ticksperrun>                    <param name="nodes" type="string">idleWorker</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">1.0</param>                </task>                 <task name="buildWorkerCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>50</ticksperrun>                    <param name="nodes" type="string">affordWorker, unsaturatedResources</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">1.0</param>                </task>                 <task name="buildSupplyCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>50</ticksperrun>                    <param name="nodes" type="string">affordSupply, supplyBlocked</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">1.0</param>                </task>            </initialTasks>        </module>        <module name="StructureBuildingCodeletModule">            <class>edu.memphis.ccrg.lida.workspace.structurebuildingcodelets.StructureBuildingCodeletModule</class>            <associatedmodule>Workspace</associatedmodule>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="GlobalWorkspace">            <class>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceImpl</class>            <param name="globalWorkspace.coalitionRemovalThreshold" type="double">0.0</param>            <param name="globalWorkspace.coalitionDecayStrategy">coalitionDecay</param>            <param name="globalWorkspace.refractoryPeriod" type="int">40 </param>            <!-- Trigger parameters -->            <param name="globalWorkspace.delayNoBroadcast" type="int">100 </param>            <param name="globalWorkspace.delayNoNewCoalition" type="int">50 </param>            <param name="globalWorkspace.aggregateActivationThreshold" type="double">2.0</param>            <param name="globalWorkspace.individualActivationThreshold" type="double">0.9</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceInitalizer</initializerclass>        </module>         <module name="ProceduralMemory">            <class>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryImpl</class>            <param name="proceduralMemory.ticksPerStep" type="int"> 14 </param>            <param name="scheme.1">if idleWorker, mine minerals|(idleWorker)()|action.mineMinerals|()()|0.01</param>            <param name="scheme.2">if affordWorker larva unsaturatedResources, build worker|(affordWorker, larva, unsaturatedResources)()|action.buildWorker|()()|0.01</param>            <param name="scheme.3">if supplyBlocked can afford supply, build supply|(affordSupply, supplyBlocked)()|action.buildSupply|()()|0.01</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.proceduralmemory.BasicProceduralMemoryInitializer</initializerclass>		<!-- <initializerclass>myagent.initializers.ProceduralMemoryInitializer</initializerclass>-->        </module>        <module name="ActionSelection">            <class>edu.memphis.ccrg.lida.actionselection.BasicActionSelection</class>            <param name="actionSelection.ticksPerStep" type="int"> 10</param>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="SensoryMotorMemory">            <class>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemory</class>            <associatedmodule>Environment</associatedmodule>            <param name="smm.1">action.mineMinerals,algorithm.mineMinerals</param>            <param name="smm.2">action.buildWorker,algorithm.buildWorker</param>            <param name="smm.3">action.buildSupply,algorithm.buildSupply</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemoryInitializer</initializerclass>        </module>    </submodules>    <listeners>        <listener>            <listenertype>edu.memphis.ccrg.lida.pam.PamListener</listenertype>            <modulename>PerceptualAssociativeMemory</modulename>            <listenername>Workspace</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.globalworkspace.BroadcastListener</listenertype>            <modulename>GlobalWorkspace</modulename>            <listenername>ProceduralMemory</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryListener</listenertype>            <modulename>ProceduralMemory</modulename>            <listenername>ActionSelection</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.actionselection.ActionSelectionListener</listenertype>            <modulename>ActionSelection</modulename>            <listenername>SensoryMotorMemory</listenername>        </listener>    </listeners></lida>